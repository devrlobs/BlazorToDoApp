@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using BlazorToDoApp.Components.Models
@using System.Linq
@inject IJSRuntime JSRuntime

<section class="todosection">
    <header class="todoHeader">
        <h1>todos</h1>
        <input class="new-todo" placeholder="What needs to be done?" @onkeyup=@((KeyboardEventArgs e) =>
            OnEnterKeyPressed(e)) @bind="userInput" autofocus>
    </header>
    <main class="main">
        <div class="todoList">
            @foreach (var todoitem in todolist)
            {
                <li> <input type="checkbox" checked="@todoitem.Value.isDone" @oninput=@(() =>
                    OnCheckboxChangeHandler(todoitem))>
                    @todoitem.Value.Description
                    <button class="removeItem" @onclick="@(() => OnRemoveItemAsync(todoitem.Key))">remove</button>
                    <button class="editItem" @onclick="@(() => OnSetEdit(todoitem.Key, todoitem.Value.Description))">Edit</button>
                </li>
            }
        </div>
    </main>
</section>


@code {
    Dictionary<int, Todo> todolist = new();
    private int id = 0;
    private string userInput = "";
    private bool isEditting = false;
    private bool isChecked = false;

    protected async Task OnEnterKeyPressed(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            await OnSave();
            userInput = "";
        }
    }
    protected async Task OnCheckboxChangeHandler(KeyValuePair<int, Todo> item)
    {
        if (!item.Value.isDone)
        {
            isChecked = true;
        }
        else
        {
            isChecked = false;
        }
        //get dictionaryItem using item from foreach
        Todo todoObj = new Todo { };
        todoObj = todolist[item.Key];

        //replace the value of item.isDone into isChecked value
        todoObj.isDone = isChecked;
        todolist[item.Key] = todoObj;
        await InvokeVoidJSRuntimeAsync(todolist);
    }
    protected async Task OnSaveItemAsync()
    {
        Todo todoobj = new Todo { Description = userInput, isDone = false };
        id++;
        todolist.Add(id, todoobj);
        await InvokeVoidJSRuntimeAsync(todolist);
    }
    protected async Task OnSave()
    {
        if (isEditting)
        {
            await OnUpdateItemAsync(id);
        }
        else
        {
            await OnSaveItemAsync();
        }
    }
    protected void OnSetEdit(int itemId, string toEditUserInput)
    {
        userInput = toEditUserInput;
        id = itemId;
        isEditting = true;
    }
    protected async Task OnUpdateItemAsync(int itemId)
    {
        Todo todoObj = new Todo { Description = userInput, isDone = false };
        todolist[itemId] = todoObj;
        await InvokeVoidJSRuntimeAsync(todolist);
    }
    protected async Task OnRemoveItemAsync(int itemId)
    {
        todolist.Remove(itemId);
        await InvokeVoidJSRuntimeAsync(todolist);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                string? countFromLocalStorage = await JSRuntime.InvokeAsync<string>("getItem", "todo");
                if (countFromLocalStorage != null)
                {
                    todolist = JsonSerializer.Deserialize<Dictionary<int, Todo>>(countFromLocalStorage);
                    id = todolist.Keys.Last();
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    protected async Task InvokeVoidJSRuntimeAsync(Dictionary<int, Todo> invokeParam)
    {
        if (invokeParam.Count() != 0)
        {
            await JSRuntime.InvokeVoidAsync("setItem", "todo", JsonSerializer.Serialize(invokeParam));
            await InvokeAsync(StateHasChanged);
        }
        else
        {   //to refine here, issue is that when last item will be removed, it does not remove that item as the param is already null
            await JSRuntime.InvokeVoidAsync("localStorage.clear");
            await InvokeAsync(StateHasChanged);
        }
    }
}