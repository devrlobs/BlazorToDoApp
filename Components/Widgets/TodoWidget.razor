@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IJSRuntime JSRuntime


<h1 class="text-[blue] font-bold text-[32px]">To do list</h1>
<input  placeholder="what needs to be done?" @onkeyup=@((KeyboardEventArgs e) => OnEnterKeyPressed(e)) @bind="userInput">



@foreach (var todoitem in todolist)
{
    <li>@todoitem.Value
    <button @onclick="@(() => OnRemoveItemAsync(todoitem.Key))">remove</button>
    <button @onclick="@(() => OnSetEdit(todoitem.Key, todoitem.Value))">Edit</button>
</li>
}


@code {
    Dictionary<int, string> todolist = new();
    private int id = 0;
    private string userInput = "";
    private bool isEditting = false;

    protected async Task OnEnterKeyPressed(KeyboardEventArgs e)
    {
        if(e.Code == "Enter")
        {
            await OnSave();
            userInput = "";
        }
    }
    protected async Task OnSaveItemAsync()
    {
        id++;
        todolist.Add(id, userInput);
        await InvokeVoidJSRuntimeAsync(todolist);
    }
    protected async Task OnSave()
    {
        if (isEditting)
        {
            await OnUpdateItemAsync(id);
        }
        else
        {
            await OnSaveItemAsync();
        }
    }
    protected void OnSetEdit(int itemId, string toEditUserInput)
    {
        userInput = toEditUserInput;
        id = itemId;
        isEditting = true;
    }
    protected async Task OnUpdateItemAsync(int itemId)
    {
        todolist[itemId] = userInput;
        await InvokeVoidJSRuntimeAsync(todolist);
    }
    protected async Task OnRemoveItemAsync(int itemId)
    {
        todolist.Remove(itemId);
        await InvokeVoidJSRuntimeAsync(todolist);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                string? countFromLocalStorage = await JSRuntime.InvokeAsync<string>("getItem", "todo");
                if (countFromLocalStorage != null)
                {
                    todolist = JsonSerializer.Deserialize<Dictionary<int, string>>(countFromLocalStorage);
                    id = todolist.Keys.Last();
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    protected async Task InvokeVoidJSRuntimeAsync(Dictionary<int, string> invokeParam)
    {
        if (invokeParam.Count() != 0)
        {
            await JSRuntime.InvokeVoidAsync("setItem", "todo", JsonSerializer.Serialize(invokeParam));
            await InvokeAsync(StateHasChanged);
        }
    }
}