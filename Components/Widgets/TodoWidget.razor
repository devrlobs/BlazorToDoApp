@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using BlazorToDoApp.Components.Models
@using System.Linq

@inject IJSRuntime JSRuntime

<section class="todosection">
    <header class="todoHeader">
        <h1>todos</h1>
        <input class="new-todo" placeholder="What needs to be done?" @onkeyup="OnEnterKeyPressedHandler"
            @bind="UserInput" autofocus />
    </header>
    <main class="main">
        <div class="todoList">
            @foreach (var todoItem in TodoList)
            {
                <li>
                    <input type="checkbox" class="checkbox-round" checked="@todoItem.Value.IsDone"
                        @oninput="@((ChangeEventArgs args ) => OnCheckboxChangeHandler(todoItem.Key, args))" />
                    <span>@todoItem.Value.Description</span>
                    <button class="editItem"
                        @onclick="@(() => OnSetEditHandler(todoItem.Key, todoItem.Value.Description))">Edit</button>
                    <button class="closeBtn" @onclick="@(() => OnRemoveItemAsync(todoItem.Key))">X</button>
                </li>
            }
        </div>
    </main>
</section>


@code {
    private Dictionary<int, Todo> TodoList { get; set; } = [];
    private int Id { get; set; } = 0;
    private string UserInput { get; set; } = string.Empty;
    private bool IsEditting { get; set; } = false;
    private bool IsChecked { get; set; } = false;

    private async void OnEnterKeyPressedHandler(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            if (!IsEditting)
            {
                await SaveItemAsync();
            }
            else
            {
                await UpdateItemAsync(Id);
            }
        }
    }
    private async void OnCheckboxChangeHandler(int itemId, ChangeEventArgs args)
    {
        if (args.Value is bool)
        {
            if ((bool)args.Value)
            {
                IsChecked = true;
            }
            else
            {
                IsChecked = false;
            }

            Todo todoObj = new();
            todoObj = TodoList[itemId];

            todoObj.IsDone = IsChecked;
            TodoList[itemId] = todoObj;
            await SaveDataToLocalStorage();

        }
    }
    private async Task SaveItemAsync()
    {
        Todo todoObj = new() { Description = UserInput, IsDone = false };
        Id = TodoList.Keys.LastOrDefault();
        TodoList.Add(++Id, todoObj);
        await SaveDataToLocalStorage();
    }

    private void OnSetEditHandler(int itemId, string toEditUserInput)
    {
        UserInput = toEditUserInput;
        Id = itemId;
        IsEditting = true;
    }
    private async Task UpdateItemAsync(int itemId)
    {
        Todo todoObj = new() { Description = UserInput, IsDone = TodoList[itemId].IsDone };
        TodoList[itemId] = todoObj;
        await SaveDataToLocalStorage();
    }
    private async Task OnRemoveItemAsync(int itemId)
    {
        TodoList.Remove(itemId);
        if (TodoList.Count is not 0)
        {
            await SaveDataToLocalStorage();
        }
        else
        {
            ClearLocalStorageAsync();
        }

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                string? todoLocalStorage = await JSRuntime.InvokeAsync<string>("getItem", "todo");
                if (todoLocalStorage is not null)
                {
                    TodoList = JsonSerializer.Deserialize<Dictionary<int, Todo>>(todoLocalStorage) ?? [];
                    Id = TodoList.Keys.Last();
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    private async Task SaveDataToLocalStorage()
    {
        await JSRuntime.InvokeVoidAsync("setItem", "todo", JsonSerializer.Serialize(TodoList));
        UserInput = string.Empty;
        IsEditting = false;
        IsChecked = false;
        Id = 0;
        await InvokeAsync(StateHasChanged);
    }

    private async void ClearLocalStorageAsync()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.clear");
        await InvokeAsync(StateHasChanged);
    }

    private async void SetAllItemsToDoneAsync(int itemId)
    {
        foreach (var item in TodoList)
        {
            Todo todoObj = new();
            todoObj = TodoList[item.Key];

            todoObj.IsDone = true;
            TodoList[item.Key] = todoObj;
            await SaveDataToLocalStorage();
        }

    }

    private async void ClearAllCompletedItemsAsync()
    {
        foreach (var item in TodoList)
        {
            if (item.Value.IsDone is true)
            {
                Todo todoObj = new();
                todoObj = TodoList[item.Key];

                TodoList.Remove(item.Key);
                await SaveDataToLocalStorage();
            }

        }
    }

    private void FilterItemsAsync(string filterOption)
    {
        Dictionary<int, Todo> tempTodoList = TodoList;

        switch(filterOption)
        {
            case "All":
                TodoList = tempTodoList;
                break;
            case "Active":
                TodoList = TodoList.Where(o=>o.Value.IsDone is false).ToDictionary(p => p.Key, p => p.Value);
                break;
            case "Completed":
                TodoList = TodoList.Where(o=>o.Value.IsDone is true).ToDictionary(p => p.Key, p => p.Value);
                break;
            
        }
    }


}